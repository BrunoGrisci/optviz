<!doctype html>
<title>Linking to Data Table</title>
<link rel="stylesheet" type="text/css" href="../d3.parcoords.css">
<link rel="stylesheet" type="text/css" href="style.css">
<style>
/* data table styles */
#grid { height: 198px; }
.row, .header { clear: left; font-size: 12px; line-height: 18px; height: 18px; }
.row:nth-child(odd) { background: rgba(0,0,0,0.05); }
.header { font-weight: bold; }
.cell { float: left; overflow: hidden; white-space: nowrap; width: 100px; height: 18px; }
.col-0 { width: 180px; }
</style>
<script src="lib/d3.min.js"></script>
<script src="../d3.parcoords.js"></script>
<script src="lib/divgrid.js"></script>
<script src="lib/underscore.js"></script>
<script src="lib/underscore.math.js"></script>
<div id="example" class="parcoords" style="height:250px;"></div>
<div id="grid"></div>

<p>The current time step is <strong id="step">0.0</strong><br/>
<input type="range" min="0" max="50000" value="0.0" step="2.0" id="timestep"/>


<script id="brushing">// quantitative color scale

var selecteds = []

var zcolorscale = d3.scale.linear()
  .domain([-2,-0.5,0.5,2])
  .range(["brown", "#999", "#999", "steelblue"])
  .interpolate(d3.interpolateLab);

var parcoords = d3.parcoords()("#example")
  //.color(color)
  .alpha(0.4);

var selected = false;
var sel_dim = 'DSSP';
var file_name = 'data/STEPS/0.csv'

function getMaxOfArray(numArray) {
    return Math.max.apply(null, numArray);
}

// update color
function change_color(dimension) {
  sel_dim = dimension;
  parcoords.svg.selectAll(".dimension")
    .style("font-weight", "normal")
    .filter(function(d) {return d == dimension; })
    .style("font-weight", "bold");

  parcoords.color(zcolor(parcoords.data(),dimension)).render();
}

// return color function based on plot and dimension
function zcolor(col, dimension) {
  var z = zscore(_(col).pluck(dimension).map(parseFloat))
  return function(d) { return zcolorscale(z(d[dimension])) }
};

// color by zscore
function zscore(col) {
  var n = col.length,
      mean = _(col).mean(),
      sigma = _(col).stdDeviation();
  return function(d) {
    return (d-mean)/sigma;
  };
};

function parallelCoordinates(file_name) {
    // load csv file and create the chart
    d3.csv(file_name, function(data) {      
      parcoords
        .dimensions({})
        .data([])
        .render();
      
      parcoords
        .data(data)
        .autoscale()
        .render()
        .updateAxes()
        .reorderable()
        .brushMode("1D-axes");  // enable brushing
      
      change_color(sel_dim);

      // create data table, row hover highlighting
      
      var grid = d3.divgrid();
      d3.select("#grid")
        //.datum(data.slice(0,5))
        .datum(data)
        .call(grid)
        .selectAll(".row")
        .on({
          "click": function(d) { 
                //parcoords.highlight([d]);
                var i = selecteds.indexOf(d); 
                if (i > -1) {
                    selecteds.splice(i, 1);
                }
                else {
                    selecteds.push(d);                
                    console.log(selecteds); 
                }  

            },
          "mouseover": function(d) { parcoords.highlight([d]); },
          "mouseout": function() {//parcoords.unhighlight;
                                  parcoords.clear("highlight");                                  
                                  for (s in selecteds) {
                                    parcoords.highlight([selecteds[s]]);
                                  }
                                  d3.selectAll([parcoords.canvas.foreground, parcoords.canvas.brushed]).classed("faded", false);
                                 }
        });
        
     parcoords.svg.selectAll(".dimension")
        .on("click", change_color)
        .selectAll(".label");
        //.style("font-size", "14px");  
        
      parcoords.on("highlight", function(d) {
            //console.log(d);
        }
      );  
        
      // update data table on brush event
      parcoords.on("brush", function(d) {
        d3.select("#grid")
          //.datum(d.slice(0,10))
          .datum(d)
          .call(grid)
          .selectAll(".row")
        .on({
          "click": function(d) { 
                //parcoords.highlight([d]);
                var i = selecteds.indexOf(d); 
                if (i > -1) {
                    selecteds.splice(i, 1);
                }
                else {
                    selecteds.push(d);                
                    console.log(selecteds); 
                }  

            },
          "mouseover": function(d) { parcoords.highlight([d]); },
          "mouseout": function() {//parcoords.unhighlight;
                                  parcoords.clear("highlight");                                  
                                  for (s in selecteds) {
                                    parcoords.highlight([selecteds[s]]);
                                  }
                                  d3.selectAll([parcoords.canvas.foreground, parcoords.canvas.brushed]).classed("faded", false);
                                 }
        });
      });
      
        d3.select("#timestep").on("change", function() {
		    d3.select("#step").text(this.value);
            parallelCoordinates('data/STEPS/' + this.value.toString() + '.csv');
        });
      
    });
}

parallelCoordinates(file_name);
</script>
